{
  "swagger": "2.0",
  "info": {
    "title": "FanSpeedLevelInterfaceMapping",
    "version": "OCFv1.0.0-20170317",
    "license": {
      "name": "copyright 2016-2017 Open Connectivity Foundation, Inc. All rights reserved.",
      "x-description": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n        1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n        2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n        THIS SOFTWARE IS PROVIDED BY THE Open Connectivity Foundation, INC. \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED.\n        IN NO EVENT SHALL THE Open Connectivity Foundation, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n        HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
    }
  },
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/FanSpeedLevelResURI" : {
      "get": {
        "description": "This API defines the mapping between an instance of an AllJoyn FanSpeedLevel interface and an OCF AirFlow Resource.\nNote that the setting of the FanSpeedLevel to '0x00' (off) is handled via the 'OffControl' interface rather than writing directly to this interface.\nIn such a case an instance of Binary Switch shall be exposed on the OCF side; this can be modeled as AirFlowControl which is then a collection of Binary Switch and AirFlow.\n",
        "parameters": [
          {"$ref": "#/parameters/interface-actuator"}
        ],
        "responses": {
            "200": {
              "description" : "",
              "x-example":
                {
                  "rt":     ["oic.r.airflow"]
                }
                ,
              "schema": { "$ref": "#/definitions/RetrieveSchema" }
            }
        }
      },
      "post": {
        "description": "",
        "parameters": [
          {"$ref": "#/parameters/interface-actuator"},
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateSchema" }
          }
        ],
        "responses": {
            "200": {
              "description" : "",
              "schema": { "$ref": "#/definitions/UpdateSchema" }
            }
        }
      }
    }
  },
  "parameters": {
    "interface-actuator" : {
      "in" : "query",
      "name" : "if",
      "type" : "string",
      "enum" : ["oic.if.a", "oic.if.baseline"]
    }
  },
  "definitions": {
    "RetrieveSchema" : 
            {
        "properties": {
          "automode": {
            "description": "Auto mode status.",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "automode = ocf.automode",
                "otherwise: automode = NotSupported(0xFF)"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "if automode != NotSupported(0xFF)",
                " ocf.automode = automode",
                "else no mapping"
              ]
            }
          },
          "fanspeedlevel": {
            "description": "Fan speed level. 0 = off.",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "fanspeedlevel = speed"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "speed = fanspeedlevel"
              ]
            }
          },
          "maxfanspeedlevel": {
            "description": "Max level allowed for fan speed",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "maxfanspeedlevel = range[1]",
                "otherwise: maxfanspeedlevel = 100"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "range[0] = 0",
                "range[1] = maxfanspeedlevel"
              ]
            }
          }
        },
        "required": [
          "fanspeedlevel",
          "maxfanspeedlevel",
          "automode"
        ],
        "type": "object"
      }

    ,
    "UpdateSchema" : 
            {
        "properties": {
          "automode": {
            "description": "Auto mode status.",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "automode = ocf.automode",
                "otherwise: automode = NotSupported(0xFF)"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "if automode != NotSupported(0xFF)",
                " ocf.automode = automode",
                "else no mapping"
              ]
            }
          },
          "fanspeedlevel": {
            "description": "Fan speed level. 0 = off.",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "fanspeedlevel = speed"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "speed = fanspeedlevel"
              ]
            }
          },
          "maxfanspeedlevel": {
            "description": "Max level allowed for fan speed",
            "type": "integer",
            "x-ocf-conversion": {
              "x-from-ocf": [
                "maxfanspeedlevel = range[1]",
                "otherwise: maxfanspeedlevel = 100"
              ],
              "x-ocf-alias": "oic.r.airflow",
              "x-to-ocf": [
                "range[0] = 0",
                "range[1] = maxfanspeedlevel"
              ]
            }
          }
        },
        "required": [
          "fanspeedlevel",
          "maxfanspeedlevel",
          "automode"
        ],
        "type": "object"
      }

  }
}
